configfile: workflow.source_path("/examples/config.yml")
PG_NAME = config['PG_NAME']
FILTERED_GENOMES_FILE = config['FILTERED_GENOMES_FILE']

DB_PATH = ""
# Check if the /db path exists, otherwise use the downloaded version
if os.path.exists("/db"):
    DB_PATH = "/db"
else:
    DB_PATH = "db-light"

import pandas as pd
genomes = pd.read_csv(FILTERED_GENOMES_FILE, dtype={"genome_id":str})
SAMPLES = genomes['genome_id'].tolist()

rule all:
    input:
        expand("processed/bakta/{sample}/{sample}.gbff", sample=SAMPLES),
        expand("processed/bakta/{sample}/{sample}.gff", sample=SAMPLES),
        'processed/panaroo_results/' + PG_NAME + '/final_graph.gml',
        'processed/mlst_report.txt',
        'processed/panaroo_results/' + PG_NAME + '/postpanaroo_gffs/',

rule batka_annotation:
    input:
        "raw/genomes/fna/{sample}.fna",
        DB_PATH  # Use the specified or default database path
    output:
        "processed/bakta/{sample}/{sample}.fna",
        "processed/bakta/{sample}/{sample}.gbff",
        "processed/bakta/{sample}/{sample}.faa",
        "processed/bakta/{sample}/{sample}.tsv",
        "processed/bakta/{sample}/{sample}.gff3"
    container:
        'docker://oschwengers/bakta@sha256:86036e6a8eb836a3dd2d53e84cc3e63623e56b7f192fac12f8cb5da56859b039'
    threads: 8
    shell:
        """
            bakta --db {input[1]} --output processed/bakta/{wildcards.sample} --locus-tag {wildcards.sample} --prefix {wildcards.sample} --threads {threads} --force {input[0]}
        """


rule edit_gff_files:
    input:
        "processed/bakta/{sample}/{sample}.gff3"
    output:
        "processed/bakta/{sample}/{sample}.gff"
    shell:
        """
        awk '!/^# /' {input} > {output}
        """

rule get_db:
    output:
        directory(DB_PATH),
    container:
        'docker://oschwengers/bakta@sha256:86036e6a8eb836a3dd2d53e84cc3e63623e56b7f192fac12f8cb5da56859b039'
    shell:
        """
            wget https://zenodo.org/record/10522951/files/db-light.tar.gz && \
            tar -xzf db-light.tar.gz && \
            rm db-light.tar.gz && \
            amrfinder_update --force_update --database db-light/amrfinderplus-db
        """
        
rule mash:
    input:
        expand("raw/genomes/fna/{sample}.fna", sample=SAMPLES)
    output:
        mash_sketch = "processed/mash/combined_sketch.msh",
        mash_distances = "processed/mash/mash_distances.txt"
    container:
        'docker://staphb/mashtree@sha256:731bbb7479f2210618425840f97f7f805078b2414bfc49ea59d9e27c3c0db-light326'
    shell:
        "mash sketch -o {output.mash_sketch} {input} && mash dist {output.mash_sketch} {output.mash_sketch} > {output.mash_distances}"

rule mlst:
    input:
        "raw/genomes/fna/{sample}.fna"
    output:
        "processed/mlst/{sample}.tsv"
    container:
        'docker://staphb/mlst@sha256:f1d99e11847bf58c7a895b1047704ebbafd16e1273d7ce7fffe1450ccf2b6d1b'
    threads:
        4
    shell:
        'mlst {input} > {output}'

rule mlst_report:
    input:
        files=expand("processed/mlst/{sample}.tsv", sample=SAMPLES)
    output:
        "processed/mlst_report.txt"
    shell:
        "cat {input.files} > {output}"

rule generate_gff_list:
    input:
        gff_files = expand("processed/bakta/{sample}/{sample}.gff", sample=SAMPLES)
    output:
        "processed/gff_list.txt"
    shell:
        """
        for gff in {input.gff_files}; do
            echo -e "$gff" >> {output}
        done
        """

rule panaroo:
    input:
        gff_list="processed/gff_list.txt",
    output:
        "processed/panaroo_results/{PG_NAME}/final_graph.gml"
    container:
        'docker://jtburrow/panaroo_1.5.2:latest'
    shell:
        """
         panaroo -i {input.gff_list} -o processed/panaroo_results/{PG_NAME} --clean-mode sensitive -f 0.7 -a core --aligner none -t 32 --remove-invalid-genes
        """

rule panaroo_gffs:
    input:
        "processed/panaroo_results/{PG_NAME}/final_graph.gml",
        gff_list="processed/gff_list.txt",
    output:
        directory("processed/panaroo_results/{PG_NAME}/postpanaroo_gffs/")
    container:
        'docker://jtburrow/panaroo_1.5.2:latest'
    shell:
        """
        panaroo-generate-gffs -i {input.gff_list} -o processed/panaroo_results/{wildcards.PG_NAME}/ --verbose
        """